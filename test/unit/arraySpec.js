// Generated by CoffeeScript 1.6.3
describe('array', function() {
  it('getId', function() {
    expect(JU.getId()).toEqual(1);
    expect(JU.getId()).toEqual(2);
    return expect(JU.getId()).toEqual(3);
  });
  describe('findArray', function() {
    return it('对象查找', function() {
      var c;
      c = [
        {
          a: 1,
          b: 10
        }, {
          a: 2,
          b: 20
        }, {
          a: 3,
          b: 30
        }
      ];
      expect(JU.findArray(c, 'a', 2).b).toEqual(20);
      return expect(JU.findArray(c, 'a', [2, 3]).length).toEqual(2);
    });
  });
  describe('updateArray', function() {
    return it('数组替换', function() {
      var a;
      a = [1, 2, 3];
      expect(JU.updateArray(a, 2, 9)).toEqual([1, 9, 3]);
      a = [1, 2, 2];
      expect(JU.updateArray(a, 2, 9)).toEqual([1, 9, 9]);
      return expect(JU.updateArray(a, 2, 9)).toEqual(a);
    });
  });
  describe('arrayRemove', function() {
    return it('数组对象删除', function() {
      var a;
      a = ['a', 'b', 'c'];
      JU.arrayRemove(a, 'b');
      return expect(a).toEqual(['a', 'c']);
    });
  });
  describe('sortOn', function() {
    var c;
    c = [
      {
        a: 1,
        b: 4
      }, {
        a: 2,
        b: 3
      }, {
        a: 3,
        b: 2
      }, {
        a: 4,
        b: 1
      }
    ];
    it('a顺序', function() {
      JU.sortOn(c, 'a');
      expect(c[0].a).toEqual(1);
      return expect(c[1].a).toEqual(2);
    });
    it('b顺序', function() {
      JU.sortOn(c, 'b');
      expect(c[0].a).toEqual(4);
      return expect(c[1].a).toEqual(3);
    });
    it('a倒序', function() {
      JU.sortOn(c, '-a');
      expect(c[0].a).toEqual(4);
      return expect(c[1].a).toEqual(3);
    });
    return it('b倒序', function() {
      JU.sortOn(c, '-b');
      expect(c[0].a).toEqual(1);
      return expect(c[1].a).toEqual(2);
    });
  });
  return describe('groupBy', function() {
    var c;
    c = [
      {
        a: 1,
        t: 1,
        g: 3
      }, {
        a: 2,
        t: 1,
        g: 4
      }, {
        a: 3,
        t: 2,
        g: 3
      }, {
        a: 4,
        t: 2,
        g: 4
      }
    ];
    it('t分组', function() {
      var g;
      g = JU.groupBy(c, 't');
      JU.sortOn(g[0].items, 'a');
      JU.sortOn(g[1].items, 'a');
      expect(g[0].label).toEqual(1);
      expect(g[1].label).toEqual(2);
      expect(g[0].items[0].a).toEqual(1);
      expect(g[0].items[1].a).toEqual(2);
      expect(g[1].items[0].a).toEqual(3);
      return expect(g[1].items[1].a).toEqual(4);
    });
    return it('g分组', function() {
      var g;
      g = JU.groupBy(c, 'g');
      JU.sortOn(g[0].items, 'a');
      JU.sortOn(g[1].items, 'a');
      expect(g[0].label).toEqual(3);
      expect(g[1].label).toEqual(4);
      expect(g[0].items[0].a).toEqual(1);
      expect(g[0].items[1].a).toEqual(3);
      expect(g[1].items[0].a).toEqual(2);
      return expect(g[1].items[1].a).toEqual(4);
    });
  });
});
