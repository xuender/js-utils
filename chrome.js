// Generated by CoffeeScript 1.6.3
var syncFetch,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

syncFetch = function(file, fn) {
  /* 获取资源文件*/

  var xhr;
  xhr = new XMLHttpRequest();
  xhr.open("GET", chrome.extension.getURL(file), false);
  xhr.onreadystatechange = function() {
    if (this.readyState === 4 && this.responseText !== "") {
      return fn(this.responseText);
    }
  };
  try {
    return xhr.send();
  } catch (_error) {}
};

chrome.i18n = (function() {
  var parseString;
  return parseString = function(msgData, args) {
    var $n_re, $n_subber, content, l10nData, message, name, placeholders, safesub, _i, _len, _ref;
    if (msgData.placeholders === void 0 && args === void 0) {
      return msgData.message.replace(/\$\$/g, '$');
    }
    safesub = function(txt, re, replacement) {
      var dollaRegex, dollaSub, undollaRegex, undollaSub;
      dollaRegex = /\$\$/g;
      dollaSub = "~~~I18N~~:";
      txt = txt.replace(dollaRegex, dollaSub);
      txt = txt.replace(re, replacement);
      undollaRegex = /~~~I18N~~:/g;
      undollaSub = "$$$$";
      return txt.replace(undollaRegex, undollaSub);
    };
    $n_re = /\$([1-9])/g;
    $n_subber = function(_, num) {
      return args[num - 1];
    };
    placeholders = {};
    _ref = msgData.placeholders;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      content = msgData.placeholders[name].content;
      placeholders[name.toLowerCase()] = safesub(content, $n_re, $n_subber);
    }
    message = safesub(msgData.message, $n_re, $n_subber);
    message = safesub(message, /\$(\w+?)\$/g, function(full, name) {
      var lowered;
      lowered = name.toLowerCase();
      if (__indexOf.call(placeholders, lowered) >= 0) {
        return placeholders[lowered];
      }
      return full;
    });
    message.replace(/\$\$/g, '$');
    l10nData = void 0;
    return {
      _getL10nData: function() {
        var file, locale, result, _j, _len1, _ref1;
        result = {
          locales: []
        };
        result.locales.push(navigator.language.replace('-', '_'));
        if (navigator.language.length > 2) {
          result.locales.push(navigator.language.substring(0, 2));
        }
        if (result.locales.indexOf("en") === -1) {
          result.locales.push("en");
        }
        result.messages = {};
        _ref1 = result.locales;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          locale = _ref1[_j];
          file = "_locales/" + locale + "/messages.json";
          syncFetch(file, function(text) {
            return result.messages[locale] = JSON.parse(text);
          });
        }
        return result;
      },
      _setL10nData: function(data) {
        return l10nData = data;
      },
      getMessage: function(messageID, args) {
        var locale, map, _j, _len1, _ref1;
        if (l10nData === void 0) {
          chrome.i18n._setL10nData(chrome.i18n._getL10nData());
        }
        if (typeof args === "string") {
          args = [args];
        }
        _ref1 = l10nData.locales;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          locale = _ref1[_j];
          map = l10nData.messages[locale];
          if (map && __indexOf.call(map, messageID) >= 0) {
            return parseString(map[messageID], args);
          }
        }
        return "";
      }
    };
  };
})();
