// Generated by CoffeeScript 1.6.3
/*
# array utls
*/

if (!this.JU) {
  this.JU = {};
}

JU.getId = function(id) {
  if (id == null) {
    id = 'ID';
  }
  /* 获取不重复的顺序ID*/

  if (window[id] === void 0) {
    window[id] = 1;
  }
  return window[id]++;
};

JU.findArray = function(collection, attribute, value) {
  /* 数组对象查找*/

  var c, o, ret, _i, _j, _len, _len1;
  if (Array.isArray(value)) {
    ret = [];
    for (_i = 0, _len = value.length; _i < _len; _i++) {
      o = value[_i];
      ret.push(JU.findArray(collection, attribute, o));
    }
    return ret;
  }
  for (_j = 0, _len1 = collection.length; _j < _len1; _j++) {
    c = collection[_j];
    if (c[attribute] === value) {
      return c;
    }
  }
  return null;
};

JU.updateArray = function(collection, oldObj, newObj) {
  /* 数组替换*/

  var index, value;
  for (index in collection) {
    value = collection[index];
    if (value === oldObj) {
      collection[index] = newObj;
    }
  }
  return collection;
};

JU.removeArray = function(collection, obj) {
  /* 删除对象*/

  var index, value, _results;
  _results = [];
  for (index in collection) {
    value = collection[index];
    if (value === obj) {
      _results.push(collection.splice(index, 1));
    }
  }
  return _results;
};

JU.sortOn = function(collection, name) {
  /* 根据数组中对象某属性进行排序*/

  var desc;
  if (name[0] === '-') {
    desc = true;
    name = name.slice(1);
  }
  collection.sort(function(a, b) {
    if (a[name] <= b[name]) {
      return -1;
    }
    return 1;
  });
  if (desc) {
    return collection.reverse();
  }
};

JU.groupBy = function(items, attribute) {
  /* 获取对象分组*/

  var group, groupValue, i, ret, _i, _len;
  ret = [];
  JU.sortOn(items, attribute);
  groupValue = '_INVALID_GROUP_VALUE_';
  for (_i = 0, _len = items.length; _i < _len; _i++) {
    i = items[_i];
    if (i[attribute] !== groupValue) {
      group = {
        label: i[attribute],
        items: []
      };
      groupValue = group.label;
      ret.push(group);
    }
    group.items.push(i);
  }
  return ret;
};
